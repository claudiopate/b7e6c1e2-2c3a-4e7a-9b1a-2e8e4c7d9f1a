{"version":3,"file":"/Users/claudiopaternesi/Desktop/Personal/MamaCrowd/src/services/WeatherService.ts","sources":["/Users/claudiopaternesi/Desktop/Personal/MamaCrowd/src/services/WeatherService.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst API_KEY = process.env.OPENWEATHER_API_KEY;\nconst BASE_URL = process.env.OPENWEATHER_BASE_URL || 'https://api.openweathermap.org/data/2.5';\n\nexport default class WeatherService {\n  static async getCurrentWeather(city: string): Promise<any> {\n    if (!API_KEY) throw new Error('Missing OpenWeather API key');\n    try {\n      const response = await axios.get(`${BASE_URL}/weather`, {\n        params: {\n          q: city,\n          appid: API_KEY,\n          units: 'metric'\n        }\n      });\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.status === 404) {\n        throw new Error('City not found');\n      }\n      throw new Error('External service error');\n    }\n  }\n\n  static async getStats(cities: string[]): Promise<any> {\n    if (!API_KEY) throw new Error('Missing OpenWeather API key');\n    try {\n      const weatherData = await Promise.all(\n        cities.map(city => this.getCurrentWeather(city))\n      );\n\n      const temperatures = weatherData.map(data => data.main.temp);\n      const humidities = weatherData.map(data => data.main.humidity);\n\n      const avgTemperature = temperatures.reduce((a, b) => a + b, 0) / temperatures.length;\n      const maxTempIndex = temperatures.indexOf(Math.max(...temperatures));\n      const maxHumidityIndex = humidities.indexOf(Math.max(...humidities));\n\n      return {\n        avgTemperature: Math.round(avgTemperature * 100) / 100,\n        maxTemperature: {\n          city: weatherData[maxTempIndex].name,\n          value: Math.round(temperatures[maxTempIndex] * 100) / 100\n        },\n        maxHumidity: {\n          city: weatherData[maxHumidityIndex].name,\n          value: humidities[maxHumidityIndex]\n        }\n      };\n    } catch (error: any) {\n      if (error.message === 'City not found') {\n        throw error;\n      }\n      throw new Error('External service error');\n    }\n  }\n\n  static async getFiveDayForecast(city: string): Promise<any> {\n    if (!API_KEY) throw new Error('Missing OpenWeather API key');\n    try {\n      const response = await axios.get(`${BASE_URL}/forecast`, {\n        params: {\n          q: city,\n          appid: API_KEY,\n          units: 'metric'\n        }\n      });\n\n      return {\n        city,\n        data: response.data.list.map((entry: any) => ({\n          dt_txt: entry.dt_txt,\n          temperature: entry.main.temp,\n          pressure: entry.main.pressure,\n          humidity: entry.main.humidity,\n        }))\n      };\n    } catch (error: any) {\n      if (error.response?.status === 404) {\n        throw new Error('City not found');\n      }\n      throw new Error('External service error');\n    }\n  }\n} "]}