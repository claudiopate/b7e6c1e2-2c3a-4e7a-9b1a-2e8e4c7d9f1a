{"/Users/claudiopaternesi/Desktop/Personal/MamaCrowd/src/services/WeatherService.ts":{"path":"/Users/claudiopaternesi/Desktop/Personal/MamaCrowd/src/services/WeatherService.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":16},"end":{"line":6,"column":49}},"4":{"start":{"line":7,"column":16},"end":{"line":7,"column":47}},"5":{"start":{"line":8,"column":17},"end":{"line":8,"column":94}},"6":{"start":{"line":11,"column":8},"end":{"line":12,"column":59}},"7":{"start":{"line":12,"column":12},"end":{"line":12,"column":59}},"8":{"start":{"line":13,"column":8},"end":{"line":28,"column":9}},"9":{"start":{"line":14,"column":29},"end":{"line":20,"column":14}},"10":{"start":{"line":21,"column":12},"end":{"line":21,"column":33}},"11":{"start":{"line":24,"column":12},"end":{"line":26,"column":13}},"12":{"start":{"line":25,"column":16},"end":{"line":25,"column":50}},"13":{"start":{"line":27,"column":12},"end":{"line":27,"column":54}},"14":{"start":{"line":31,"column":8},"end":{"line":32,"column":59}},"15":{"start":{"line":32,"column":12},"end":{"line":32,"column":59}},"16":{"start":{"line":33,"column":8},"end":{"line":57,"column":9}},"17":{"start":{"line":34,"column":32},"end":{"line":34,"column":99}},"18":{"start":{"line":34,"column":69},"end":{"line":34,"column":97}},"19":{"start":{"line":35,"column":33},"end":{"line":35,"column":72}},"20":{"start":{"line":35,"column":57},"end":{"line":35,"column":71}},"21":{"start":{"line":36,"column":31},"end":{"line":36,"column":74}},"22":{"start":{"line":36,"column":55},"end":{"line":36,"column":73}},"23":{"start":{"line":37,"column":35},"end":{"line":37,"column":96}},"24":{"start":{"line":37,"column":65},"end":{"line":37,"column":70}},"25":{"start":{"line":38,"column":33},"end":{"line":38,"column":80}},"26":{"start":{"line":39,"column":37},"end":{"line":39,"column":80}},"27":{"start":{"line":40,"column":12},"end":{"line":50,"column":14}},"28":{"start":{"line":53,"column":12},"end":{"line":55,"column":13}},"29":{"start":{"line":54,"column":16},"end":{"line":54,"column":28}},"30":{"start":{"line":56,"column":12},"end":{"line":56,"column":54}},"31":{"start":{"line":60,"column":8},"end":{"line":61,"column":59}},"32":{"start":{"line":61,"column":12},"end":{"line":61,"column":59}},"33":{"start":{"line":62,"column":8},"end":{"line":85,"column":9}},"34":{"start":{"line":63,"column":29},"end":{"line":69,"column":14}},"35":{"start":{"line":70,"column":12},"end":{"line":78,"column":14}},"36":{"start":{"line":72,"column":57},"end":{"line":77,"column":17}},"37":{"start":{"line":81,"column":12},"end":{"line":83,"column":13}},"38":{"start":{"line":82,"column":16},"end":{"line":82,"column":50}},"39":{"start":{"line":84,"column":12},"end":{"line":84,"column":54}},"40":{"start":{"line":88,"column":0},"end":{"line":88,"column":33}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":10,"column":4},"end":{"line":10,"column":5}},"loc":{"start":{"line":10,"column":41},"end":{"line":29,"column":5}},"line":10},"2":{"name":"(anonymous_2)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":34},"end":{"line":58,"column":5}},"line":30},"3":{"name":"(anonymous_3)","decl":{"start":{"line":34,"column":61},"end":{"line":34,"column":62}},"loc":{"start":{"line":34,"column":69},"end":{"line":34,"column":97}},"line":34},"4":{"name":"(anonymous_4)","decl":{"start":{"line":35,"column":49},"end":{"line":35,"column":50}},"loc":{"start":{"line":35,"column":57},"end":{"line":35,"column":71}},"line":35},"5":{"name":"(anonymous_5)","decl":{"start":{"line":36,"column":47},"end":{"line":36,"column":48}},"loc":{"start":{"line":36,"column":55},"end":{"line":36,"column":73}},"line":36},"6":{"name":"(anonymous_6)","decl":{"start":{"line":37,"column":55},"end":{"line":37,"column":56}},"loc":{"start":{"line":37,"column":65},"end":{"line":37,"column":70}},"line":37},"7":{"name":"(anonymous_7)","decl":{"start":{"line":59,"column":4},"end":{"line":59,"column":5}},"loc":{"start":{"line":59,"column":42},"end":{"line":86,"column":5}},"line":59},"8":{"name":"(anonymous_8)","decl":{"start":{"line":72,"column":45},"end":{"line":72,"column":46}},"loc":{"start":{"line":72,"column":57},"end":{"line":77,"column":17}},"line":72}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":8,"column":17},"end":{"line":8,"column":94}},"type":"binary-expr","locations":[{"start":{"line":8,"column":17},"end":{"line":8,"column":49}},{"start":{"line":8,"column":53},"end":{"line":8,"column":94}}],"line":8},"4":{"loc":{"start":{"line":11,"column":8},"end":{"line":12,"column":59}},"type":"if","locations":[{"start":{"line":11,"column":8},"end":{"line":12,"column":59}},{"start":{"line":11,"column":8},"end":{"line":12,"column":59}}],"line":11},"5":{"loc":{"start":{"line":24,"column":12},"end":{"line":26,"column":13}},"type":"if","locations":[{"start":{"line":24,"column":12},"end":{"line":26,"column":13}},{"start":{"line":24,"column":12},"end":{"line":26,"column":13}}],"line":24},"6":{"loc":{"start":{"line":31,"column":8},"end":{"line":32,"column":59}},"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":32,"column":59}},{"start":{"line":31,"column":8},"end":{"line":32,"column":59}}],"line":31},"7":{"loc":{"start":{"line":53,"column":12},"end":{"line":55,"column":13}},"type":"if","locations":[{"start":{"line":53,"column":12},"end":{"line":55,"column":13}},{"start":{"line":53,"column":12},"end":{"line":55,"column":13}}],"line":53},"8":{"loc":{"start":{"line":60,"column":8},"end":{"line":61,"column":59}},"type":"if","locations":[{"start":{"line":60,"column":8},"end":{"line":61,"column":59}},{"start":{"line":60,"column":8},"end":{"line":61,"column":59}}],"line":60},"9":{"loc":{"start":{"line":81,"column":12},"end":{"line":83,"column":13}},"type":"if","locations":[{"start":{"line":81,"column":12},"end":{"line":83,"column":13}},{"start":{"line":81,"column":12},"end":{"line":83,"column":13}}],"line":81}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":1},"f":{"0":1,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[1,1],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},"inputSourceMap":{"version":3,"file":"/Users/claudiopaternesi/Desktop/Personal/MamaCrowd/src/services/WeatherService.ts","sources":["/Users/claudiopaternesi/Desktop/Personal/MamaCrowd/src/services/WeatherService.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nconst API_KEY = process.env.OPENWEATHER_API_KEY;\nconst BASE_URL = process.env.OPENWEATHER_BASE_URL || 'https://api.openweathermap.org/data/2.5';\n\nexport default class WeatherService {\n  static async getCurrentWeather(city: string): Promise<any> {\n    if (!API_KEY) throw new Error('Missing OpenWeather API key');\n    try {\n      const response = await axios.get(`${BASE_URL}/weather`, {\n        params: {\n          q: city,\n          appid: API_KEY,\n          units: 'metric'\n        }\n      });\n      return response.data;\n    } catch (error: any) {\n      if (error.response?.status === 404) {\n        throw new Error('City not found');\n      }\n      throw new Error('External service error');\n    }\n  }\n\n  static async getStats(cities: string[]): Promise<any> {\n    if (!API_KEY) throw new Error('Missing OpenWeather API key');\n    try {\n      const weatherData = await Promise.all(\n        cities.map(city => this.getCurrentWeather(city))\n      );\n\n      const temperatures = weatherData.map(data => data.main.temp);\n      const humidities = weatherData.map(data => data.main.humidity);\n\n      const avgTemperature = temperatures.reduce((a, b) => a + b, 0) / temperatures.length;\n      const maxTempIndex = temperatures.indexOf(Math.max(...temperatures));\n      const maxHumidityIndex = humidities.indexOf(Math.max(...humidities));\n\n      return {\n        avgTemperature: Math.round(avgTemperature * 100) / 100,\n        maxTemperature: {\n          city: weatherData[maxTempIndex].name,\n          value: Math.round(temperatures[maxTempIndex] * 100) / 100\n        },\n        maxHumidity: {\n          city: weatherData[maxHumidityIndex].name,\n          value: humidities[maxHumidityIndex]\n        }\n      };\n    } catch (error: any) {\n      if (error.message === 'City not found') {\n        throw error;\n      }\n      throw new Error('External service error');\n    }\n  }\n\n  static async getFiveDayForecast(city: string): Promise<any> {\n    if (!API_KEY) throw new Error('Missing OpenWeather API key');\n    try {\n      const response = await axios.get(`${BASE_URL}/forecast`, {\n        params: {\n          q: city,\n          appid: API_KEY,\n          units: 'metric'\n        }\n      });\n\n      return {\n        city,\n        data: response.data.list.map((entry: any) => ({\n          dt_txt: entry.dt_txt,\n          temperature: entry.main.temp,\n          pressure: entry.main.pressure,\n          humidity: entry.main.humidity,\n        }))\n      };\n    } catch (error: any) {\n      if (error.response?.status === 404) {\n        throw new Error('City not found');\n      }\n      throw new Error('External service error');\n    }\n  }\n} "]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"3b1ea3f0a4199a2140524e3888894291091e764c","contentHash":"dcf5bb71757eda43d298ba036a442658536b305fd6c131ef3b3d65975fb412d2"}}